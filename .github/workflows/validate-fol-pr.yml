name: Validate FOL with Check Run

on:
    pull_request:
        branches: [main]
        paths:
            - "fol/**/*.fol"

jobs:
    validate-fol:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            checks: write # Check Run 결과를 기록하기 위한 권한
            pull-requests: read

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
              # 저장소의 최신 코드를 워크플로우 환경으로 가져옵니다.

            - name: Identify changed .fol files
              id: find_files
              run: |
                  # 기본 브랜치의 최신 커밋을 가져옵니다.
                  git fetch origin ${{ github.event.pull_request.base.ref }}
                  # 현재 PR에서 변경된 .fol 파일 목록을 추출합니다.
                  CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} -- "fol/**/*.fol")
                  echo "::set-output name=files::$CHANGED_FILES"

            - name: Exit if no .fol file changed
              if: steps.find_files.outputs.files == ''
              run: |
                  echo "No .fol files changed. Exiting."
                  exit 0

            - name: Build JSON payload
              id: build_payload
              run: |
                  FILES="${{ steps.find_files.outputs.files }}"
                  PAYLOAD="{\"files\":["
                  # 각 파일의 경로와 파일 내용을 JSON 객체로 인코딩합니다.
                  for file in $FILES; do
                    # jq -Rs 를 사용하여 파일 전체 내용을 JSON 문자열로 인코딩합니다.
                    CONTENT=$(cat "$file" | jq -Rs .)
                    PAYLOAD="${PAYLOAD}{\"path\":\"$file\",\"content\":${CONTENT}},"
                  done
                  # 마지막 쉼표 제거 후 JSON 배열 닫기
                  PAYLOAD="${PAYLOAD%,}]}"
                  echo "$PAYLOAD" > payload.json
                  echo "::set-output name=payload::$PAYLOAD"
                  # 생성된 payload.json을 확인합니다.
                  cat payload.json

            - name: Call FOL Validation API
              id: call_api
              run: |
                  # payload.json에 담긴 데이터를 API에 POST 방식으로 전송합니다.
                  STATUS=$(curl -s -o response.json -w "%{http_code}" \
                    -X POST https://imperator-of-mars.ainetwork.xyz/api/validate-fol \
                    -H "Content-Type: application/json" \
                    -d @payload.json)
                  echo "::set-output name=status::$STATUS"
                  echo "API Response:"
                  cat response.json

            - name: Fail if validation error
              if: steps.call_api.outputs.status != '200'
              run: |
                  echo "FOL validation failed. Exiting with error."
                  exit 1

            - name: Success message
              if: steps.call_api.outputs.status == '200'
              run: echo "FOL validation succeeded."
