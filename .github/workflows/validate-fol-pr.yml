name: Validate FOL with Check Run

on:
    pull_request:
        branches: [main]
        paths:
            - "fol/**/*.fol"
            - "fol/*.fol" # fol/ 바로 아래 파일도 포함

jobs:
    validate-fol:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            checks: write # Check Run 결과 기록용 권한
            pull-requests: read

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # 전체 히스토리를 가져와 base와 head 커밋 모두 사용 가능하게 함

            - name: Identify changed .fol files
              id: find_files
              run: |
                  echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
                  echo "Head SHA: ${{ github.event.pull_request.head.sha }}"
                  # fol/ 바로 아래 파일과 하위 디렉토리 파일 모두 비교
                  CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "fol/*.fol" "fol/**/*.fol")
                  echo "CHANGED_FILES: [$CHANGED_FILES]"
                  # 새로운 환경 파일 방식으로 출력값 설정
                  echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

            - name: Exit if no .fol file changed
              if: steps.find_files.outputs.files == ''
              run: |
                  echo "No .fol files changed. Exiting."
                  exit 0

            - name: Build JSON payload
              id: build_payload
              run: |
                  FILES=$(echo "${{ steps.find_files.outputs.files }}" | xargs)
                  echo "DEBUG: Files = [$FILES]"
                  PAYLOAD="{\"files\":["
                  for file in $FILES; do
                    if [ -f "$file" ]; then
                      CONTENT=$(jq -Rs . < "$file")
                      echo "DEBUG: File [$file] exists."
                    else
                      echo "DEBUG: File [$file] does not exist."
                      CONTENT="\"\""
                    fi
                    PAYLOAD="${PAYLOAD}{\"path\":\"$file\",\"content\":${CONTENT}},"
                  done
                  # 마지막 쉼표 제거 후 JSON 배열 닫기
                  PAYLOAD="${PAYLOAD%,}]}"
                  echo "$PAYLOAD" > payload.json
                  echo "----- Generated payload.json -----"
                  cat payload.json
                  echo "----------------------------------"
                  echo "payload=$PAYLOAD" >> $GITHUB_OUTPUT

            - name: Call FOL Validation API
              id: call_api
              run: |
                  STATUS=$(curl -s -o response.json -w "%{http_code}" \
                    -X POST https://imperator-of-mars.ainetwork.xyz/api/validate-fol \
                    -H "Content-Type: application/json" \
                    -d @payload.json)
                  echo "status=$STATUS" >> $GITHUB_OUTPUT
                  BODY=$(cat response.json)
                  echo "body=$BODY" >> $GITHUB_OUTPUT
                  echo "API HTTP Status Code: $STATUS"
                  echo "----- API Response (response.json) -----"
                  cat response.json
                  echo "-----------------------------------------"

            - name: Report Check Run (Pass)
              if: steps.call_api.outputs.status == '200'
              uses: LouisBrunner/checks-action@v1.6.0
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  name: FOL Consistency Check
                  conclusion: success
                  output: |
                      {
                        "title": "✅ .fol 정합성 검사 통과",
                        "summary": "모든 .fol 파일이 검사를 통과했습니다.",
                        "text": "변경된 파일들: ${{ toJson(steps.find_files.outputs.files) }}"
                      }

            - name: Report Check Run (Fail)
              if: steps.call_api.outputs.status != '200'
              uses: LouisBrunner/checks-action@v1.6.0
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  name: FOL Consistency Check
                  conclusion: failure
                  output: |
                      {
                        "title": "❌ .fol 정합성 검사 실패",
                        "summary": "Webhook 응답 상태: ${{ steps.call_api.outputs.status }}",
                        "text": "실패 사유: ${{ toJson(steps.call_api.outputs.body) }}"
                      }

            - name: Fail workflow on validation error
              if: steps.call_api.outputs.status != '200'
              run: exit 1
